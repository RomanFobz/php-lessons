<meta charset="utf-8">
<?php




//															ТИПЫ данных  															

$GLOBALS;  // в этой переменной есть  массив в котором  есть все обьявленные  переменные 
//если в переменной будет значение больше 0 , то оно будет передавать true 
	$a = 100;	//integer
	$b = 13.4;	//float - дробь
	$c = 'Roman';	//string  	(все что вписываеться в одинарные кавычки- это автомотически строка)
	$boolean = true; //булево значение true или false 
	$null = NULL; //пустая переменная


	$mass = array( //массив
		'Roman',
		'Petya',
		'Vasya'
);  //массив

$var = 3;
 if(isset($var)){   //isset проверка на то существует ли переменная или нет
 	echo "есть переменная" . '<br>'; //если да то то выведет  "есть переменная"
 }

	unset($var); //Уничтожение переменной 


	echo "$mass[2]<br>"; //вывод элемента массива (в квадратных скобках индекс элемента начиная с 0)







																			//КОНСТАНТЫ																	

define("pi" , 3.14);  // обьявление константы 1-название константы 2- значение

echo pi;  //вывод костанты на экран

//		Волшебные КОНСТАНТЫ-это константы которые вшиты в php

echo __LINE__; //константа которая возвращает значение строки на которой она была вызванна (43)


//					Вывод информации php 													

error_reporting(E_ALL); //php будет уведомлять о всех ошибках

//конкатанация (обьеденение строк)
	$name = 'Roman';
	$surname = 'Serkov';

	echo $name . ' ' . $surname;	//знак конкатанации "."


$var_1 = 'v1';
$var_2 = 'v2';
echo $var_1 , $var_2; //можно выводить сразу несколько переменных через запятую
echo "переменная: $var_1 , $var_2"; //в кавычках можно комбинировать переменные со строкой через запятую

$arr1 =   array('name' => 'val' );
echo("МАассив: {$arr1['name']}"); //что бы вывести текст вместе с массивом,нужно массив обернуть в фигурные скобки


//переменные
$x = 4; //создание переменной
$y = 5;
echo $y + $x; //echo отвечает за вывод чего либо (можно заменить функцией print)




//													операторы																

//арифметические (* + - / %-диление по модулю)
echo(245 % 2); //показывает остаток от диления
echo 32 ** 2; //возведение в степень

//присвоение
$pri = 213; //присвоение "="
$pri += 2; //к переменной $pri прибавит 2 и присвоет (также есть -=, /=, *=, %=)

//Сравнение (> ,< ,<= ,>= ,==,)
// ===  -строго равно
// != не равно
// <> не равно
// !== не идентично

if($pri == '215'){ //при не  строгом  сравнении типы дданных не сравниваються (можно число сравнивать со строкой и будет true, а при строгом(===) идет сравнение типов и если разные типы , то вернет false.  с (!= не равно) и (!== не идентично) - аналогично) 
	echo "<br>".'TRUE';
}else{
	echo "<br>".'FALSE';
}

$i = 2;
//инкримент и декримент ($i++ , ++$i)-инкремент , ($i-- , --$i) - декремент 
$i++; /*и*/ ++$i; //отличаються только тем что в момент вызова $i++ у i ещё старое значение(при след вызове поменяеться значение i) , а у  ++$i сразу же применяеться дикрементация(прибавление единицы). С минусом аналогично 

//Логические операторы (! ,&& ,AND || ,OR XOR )

// ! - NOT
//AND && - ве рнет true только тогда когда все операнды true
//OR  || - true тогда когда хотя-бы один операнд true
//XOR - TRUE если  один с операндов  TRUE, но не оба.
// .=  конкатонировать и присвоить

$log_1 = true;
$log_2 = false;


if($log_1 || $log_2){ 
	echo "<br>".'TRUE';
}else{
	echo "<br>".'FALSE';
}

//строковые операторы (.  .=)

$strg = 'привет';
$strg .= ' Рома'; //конкатанирует и присваивает в  эту же новое переменную значение

//операторы моссивов

 $op_arr_1 = array(
 	'id' => 1 ,
 	'Title' => 'Привет' , 
 );

  $op_arr_2 = array(
 	'id' => 1 ,
 	'Title' => 'Привет' , 
 	'views' => 'Много' , 
 );

print_r($op_arr_1 + $op_arr_2); //прибавляет содержимое массивов (одинаковые поля не дублируються)

print_r($op_arr_1 == $op_arr_2); //при сравнении сравниваються не только поля но и значения массивов

print_r($op_arr_1 === $op_arr_2); //идентичное сравнение

print_r($op_arr_1 != $op_arr_2); //не равно 

//приоритеты операторов 


//											Подключение венешних файлов											

require'css/style.css'; //подключение файла стилей  (если без _once ,то сколько раз ми подключаем файл столько раз он и будет исполняться)если эта функция не находит файл,то она выдаст ошибку

require_once'css/style.css'; //приставка _once означает что подключение будет только один раз 

include'css/style.css'; //include отличаеться от require только тем что он не вызывает ошибки если файл не был не найден


//												 массив 														

$pusto = []; //пустой массив

$m = ['Рома' , 'Антон' , 'Петя'];

$m[] = 'Вадим'; //добавление нового елемента в  массив
$m[1] = 'Катя';  //замена елементов в массиве (запниться елемент с индексом 1) 

array_push($m , "Лера"); //елементы можно добавлять вот такой функцией 1-наз массива  2- что добавить

print_r($m).'</br>';


//получение елементов массива
$m[0]; //первый ел массива
array_shift($m); //получение первого елемента массива (ета функция не только его получает но и уберает из массива)

$m[count($m)-1]; //получение последнего ел массива count - считает к-во елементов в массиве

array_pop($m); //получение последнего ел. массива с удалением его 

array_splice($m , 1 , 0, 'Лёха'); //ВСТАВКА В СЕРЕДИНУ МАССИВА 1-массив 2-индекст после которого хотим добавить новый елемент, 0-сколько елементов удалить, Лёха - что добавить (всесто одного елемента можно добавить несколько просто передав переменную с другим массивом и это массив вставиться)


//асоциативный массив
	$as = array( //в асоциативном массиве можно самому создавать тндекс
		'name' => "Roma",  //индекс name
		'adge' => 18, //индекс adge
		'inm'  => array(  //массив в массиве
			'1234',
			'romannn'
	)
);

$as['size'] =  21; //добавление нового елемента в массив
$as['adge'] = 19; //замена елемента в массиве
echo $as["name"]; //индекс пишеться в кавычках
echo $as['inm'][1]; //вывод элемнета массива который в массиве
 $as['inm'][2 - 1]; //обращаться к массиву можно таким образом (обратиться к это с индексом 1 )



//массив с массивами
$arrayOne = array(
	'id' => 1,
	'title' => 'заголовок',
	'views' => 245,
 );

$arrayTwo = array(
	'id' => 3,
	'title' => 'заголовок2',
	'views' => 234,
 );

$_2d_mass = array($arrayOne , $arrayTwo); //двумерный массив (массив с массивами)

echo '<br>'.$_2d_mass[1]['title'].'<br>'; //обращение  к  двумерному массиву в котором массив с индексом 1 в котром массив с инжексом 'title'


//														Объекты											

//посмотреть норм видео по обьектам



//								Математические Операции (* + - / %-диление по модулю)														

	echo 5 + 10; //прибавление 
	echo 10 - 2; //вычитание
//Мат. функции
echo abs(-100) .'<br>'; //возвращает натуральное число
echo round(100.56) .'<br>'; //округляет число по настоящим правилам
echo ceil(12.6) .'<br>'; //округляет число в большую сторону
echo floor(12.6) .'<br>'; //округляет число в меньшую сторону
echo rand(12, 6) .'<br>'; //генерирует случайное число в заданом диапазоне(от 12 до 6) 
echo min(12, 4, 6, 9, 7) .'<br>'; //возвращает большее число из всех (max-большее)

	is_numeric('345'); //возвратит true если там число (не важно в строке или в нет)



//														УСЛОВИЯ																			
				//для условий есть операторы сравнения и лог операторы
			//cравнение  '<'	'>'	'<='	'>='	'!='
		//логические операторы and   or not xor

	$weather = 'cj';

	if( $weather == 'дождь' || $weather == 'снег'){ //если в веременной  $weather содержиться строка  дождь или снег 
		echo 'Возьми зонт';  //то выведеться  Возьми зонт
	}else{ //в ином случае
		echo 'погода хорошая<br>';  //вывелдеться  погода хорошая
	}


$adge = 15;

if($adge == 18){ //помимо проверки на равенство есть '<'	'>'	'<='	'>='	'!='
	echo ' oK';
}elseif ($adge <= 16) { //проверка на другое условие
	echo 'идеал';
}else{ //если ни одно из условий не подходит (в ином случает)
	echo 'ololol';
}

//тернарный оператор
// условие ? код если условие true : код если условие false
$us = 1;



//															Цыклы																				

/*for(начальное зн. переменной; условие; итерация;){
	выполняимемый код
}*/ 

for($i = 1 , $t = 2; $i <= 10; $i++){ //i=1.	пока i <=10 будет выполняться код с шагом 1(с каждым шагом прибавляеться 1)
	echo 'привет всем!<br>'; //выполняемый код 
} //в цыкле может задаваться одна переманная ,  можно несколько через запятую

//		while
$t = 2;
while($t <= 10){ //пока t <= 100
	echo 'Test' .$t. '<br>' ;	//будет выполняться этот код
	$t++;
}

//		do while
$v = 1;
do{
	echo $v++;  //сначала выполняеться действие 
}
while($v <= 20); //а потом проходит проверка


//		forech
$sub = array(
	'Roman',
	'Vadim',
	'Lexa'
 );

foreach ($sub as $value){ //из массива sub берем элементы и записываем в переменную $value
	echo $value . '<br>'; //при каждом проходе цыкла будет записываться следующий эл. массива(перебеёт весь массив)
}

foreach ($as as $key => $value) {  //проходим по массиву as и при каждам проходе по массиву мы получаем ключ и значение в одной записи
	// сдесь код
	//и тут мы можем получать $key и $values
}


//															функция 													

function myfunc(){ //ключевое слово function потом название функции
//исполняемый код
	echo 'функция' . '<br>';
}

myfunc(); //вызов функции

function f1(){
	global $t , $sub; //использование глобальных переменных в функции
}

function f2(){
	static $z4; //static говорит что каждый раз когда мы вызываем переменнцю то нужно её сохранить в памят
	$z4++; //сохранило что z4 = 2 а след раз когда вызовем функцию к двум прибавит 1
	echo $z4;
}

f2(); //каждый раз когда мы вызываем функцию - переманная увеличиываеться на 1 
f2();
f2();
 
 // array_walk();

//										строковые функции							

 mb_substr('строка' , 0 , 3 , 'UTF-8'); //розрезает строку 1- сама строка 2- с какого символа началь обрезать 3 - сколько сымволов оставить 4 - кодировка в которой находится наша строка

trim(' строка  '); //уберает пробелы вначале и в конце 

strlen('string'); //возвращает длинну строки   $connect идент подключения

mysqli_real_escape_string('email'); //делает строку безопасной (используеться для форм которые работают с базой данных );




//																		MySQL + PHP																							


$connect = mysqli_connect('127.0.0.1', 'mysql', 'mysql', 'test_db'); //подключение к базе данных (127.0.0.1 -сервер. потом логин и пароль MySQL . test_db -название БД)

if($connect == FALSE){
	echo "Pizda";
	echo mysqli_connect_error(); //выведет причину ошибки если неудачно подкл. к БД
	exit(); //завершение скрипта (если $connect == false то exit(); выполниться и дальше ничего не будет выполняться)
}else{
	echo 'все хорошо!!';
}

$r1 = mysqli_query($connect , "SELECT * FROM `articles_categories`"); //вытаскиваем табл категорий $connect-аргумент подключения (в $r1 записали табл articles_categories)

$res1 = mysqli_fetch_assoc($r1); //в $res1 записали РЕЗУЛЬТАТ который уже можно вывести на екран (передаст слово Array)
$res2 = mysqli_fetch_assoc($r1); //если вызвать ещё раз эту функцию,то вернет след. запись

print_r($res1); //выведет что находиться в массиве (выведет только 1ю строчку) (print_r - "разпечатывает" значение и выводит содержимое на экран)

print_r($res2); //выведет след запись табл


while( ($rec = mysqli_fetch_assoc($r1))) { // в новую переменную передаем результат массива (а именно сами записи табл)  и пока есть что возвращать будет исполняться цыкл 
	print_r($rec); //в теле цыкла выводим записи таблицы (и с каждым выполнением цыкла будет выводиться след запись) 
	echo '<br><hr>';
}
?>

		<ul>
			<?php 
				while( ($cat = mysqli_fetch_assoc($r1)) ){ //в новую переменную передаем массив с записями табл
					echo '<li>' . $cat['title'] . '</li>'; //челез li выводим переменную $cat а именно значения в столбце  title
				}
			 ?>
		</ul>
<?php 
 echo 'Записей: ' . mysqli_num_rows($r1); //возвращает к-во записей в таблице





					//Практические примеры					



echo  '<br>'.'Практика';

function get_categories($db){ //db - ожидаемая переменная
	$sql = "SELECT * FROM `articles_categories`"; //запишем в переманную $sql таблицу категорий
	$result = mysqli_query($db, $sql);  //сдесь лежит ожидаемая переменная - это иденификатор подключения (вернет обьект и инфой о табл)
	$categories = mysqli_fetch_all($result, MYSQLI_ASSOC); //преобразует обьект в массив MYSQLI_ASSOC -эта константа для того что-бы были ключи такие какие мы сделали в БД а не такие какие захотел php. Если вместо MYSQLI_ASSOC написать 1 - ничего не измениться
	 return $categories; //функция будет возвращать 
} //что- ы не вводить постоянно идент подключения внутри фкнукции нужно использовать глобальную переменну global(connect); - идентификатор подлючения

$cate = get_categories($connect); // функция вернет массив который мы вытащили с БД  $connect - это та самая ожидаемая переменная (идентификатор подключения)




// mysqli_close($connect); //закрывае соединение с БД (нужно для оптимизации)

?>


<!-- HTML разметка -->
<!DOCTYPE HTML>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>php</title>
	<link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
</head>
<body>
	<p><?php echo $cate[1]['title'] ?></p>
	<p><?=$cate[1]['title']?></p> <!-- записи модно выводить таким образом -->
</body>
</html>

